[{"E:\\School\\'21-F\\ECE464 Databases\\nodesql\\frontend\\src\\index.js":"1","E:\\School\\'21-F\\ECE464 Databases\\nodesql\\frontend\\src\\App.js":"2","E:\\School\\'21-F\\ECE464 Databases\\nodesql\\frontend\\src\\utils.js":"3","E:\\School\\'21-F\\ECE464 Databases\\nodesql\\frontend\\src\\components\\Modal\\index.js":"4"},{"size":228,"mtime":1637205214025,"results":"5","hashOfConfig":"6"},{"size":1858,"mtime":1637716001862,"results":"7","hashOfConfig":"6"},{"size":12190,"mtime":1637724695216,"results":"8","hashOfConfig":"6"},{"size":489,"mtime":1637716058366,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"11bnzc8",{"filePath":"13","messages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"E:\\School\\'21-F\\ECE464 Databases\\nodesql\\frontend\\src\\index.js",[],["21","22"],"E:\\School\\'21-F\\ECE464 Databases\\nodesql\\frontend\\src\\App.js",["23","24","25"],"import './App.css';\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { LiteGraph } from 'litegraph.js';\r\nimport 'litegraph.js/css/litegraph.css';\r\nimport { init, getSQL } from './utils';\r\nimport Modal from './components/Modal';\r\nconst { operations } = require('./schemas/operations.json');\r\n\r\nfunction App() {\r\n  var graph;\r\n  var canvasRef = useRef(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [query, setQuery] = useState('');\r\n  const [result, setResult] = useState('');\r\n\r\n  const setResponse = (query, result) => {\r\n    setQuery(query);\r\n    setResult(result);\r\n  }\r\n\r\n  const setShowModalWrapper = (b) => {\r\n    getSQL(graph);\r\n    setShowModal(b);\r\n  }\r\n\r\n  useEffect(() => {\r\n\r\n    const handleResize = () => {\r\n      const ctx = canvasRef.current.getContext('2d');\r\n      ctx.canvas.width = window.innerWidth;\r\n      ctx.canvas.height = window.innerHeight;\r\n    };\r\n\r\n    const handleKeyDown = (e) => {\r\n      if (e.key === 's') {\r\n        getSQL();\r\n      }\r\n    };\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    handleResize();\r\n\r\n    graph = new LiteGraph.LGraph();\r\n    graph.configure({\r\n    });\r\n\r\n\r\n\r\n    var canvas = new LiteGraph.LGraphCanvas(\"#mycanvas\", graph);\r\n\r\n    graph.start()\r\n    LiteGraph.clearRegisteredTypes()\r\n\r\n\r\n    init(graph, setShowModalWrapper, setResponse);\r\n    var displayNode = LiteGraph.createNode(\"Display/Display\");\r\n    displayNode.pos = [window.innerWidth / 2, window.innerHeight / 2];\r\n    graph.add(displayNode);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <canvas ref={canvasRef} id='mycanvas' width='1024' height='720'></canvas>\r\n      <Modal showModal={showModal} setShowModal={setShowModal} query={query} result={result}></Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","E:\\School\\'21-F\\ECE464 Databases\\nodesql\\frontend\\src\\utils.js",["26","27","28","29","30","31"],"E:\\School\\'21-F\\ECE464 Databases\\nodesql\\frontend\\src\\components\\Modal\\index.js",["32","33"],"import React, { useState, useEffect } from 'react';\r\nimport './styles.css';\r\n\r\nconst Modal = ({ showModal: show, setShowModal: setShow, query, result }) => {\r\n    const handleClose = () => {\r\n        setShow(false);\r\n    }\r\n\r\n    return (\r\n        <div className=\"modal\" style={{ \"display\": (show ? \"block\" : \"none\") }}>\r\n            <button onClick={handleClose}>&times;</button>\r\n            <p>{query}</p>\r\n            <p>{result}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Modal;",{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":7,"column":9,"nodeType":"40","messageId":"41","endLine":7,"endColumn":19},{"ruleId":"42","severity":1,"message":"43","line":44,"column":13,"nodeType":"44","endLine":44,"endColumn":35},{"ruleId":"38","severity":1,"message":"45","line":50,"column":9,"nodeType":"40","messageId":"41","endLine":50,"endColumn":15},{"ruleId":"38","severity":1,"message":"46","line":17,"column":7,"nodeType":"40","messageId":"41","endLine":17,"endColumn":22},{"ruleId":"38","severity":1,"message":"47","line":36,"column":7,"nodeType":"40","messageId":"41","endLine":36,"endColumn":14},{"ruleId":"48","severity":1,"message":"49","line":182,"column":27,"nodeType":"50","messageId":"51","endLine":182,"endColumn":29},{"ruleId":"48","severity":1,"message":"49","line":200,"column":28,"nodeType":"50","messageId":"51","endLine":200,"endColumn":30},{"ruleId":"38","severity":1,"message":"52","line":251,"column":9,"nodeType":"40","messageId":"41","endLine":251,"endColumn":14},{"ruleId":"53","severity":1,"message":"54","line":262,"column":33,"nodeType":"55","messageId":"56","endLine":262,"endColumn":34,"fix":"57"},{"ruleId":"38","severity":1,"message":"58","line":1,"column":17,"nodeType":"40","messageId":"41","endLine":1,"endColumn":25},{"ruleId":"38","severity":1,"message":"59","line":1,"column":27,"nodeType":"40","messageId":"41","endLine":1,"endColumn":36},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"no-unused-vars","'operations' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","Assignments to the 'graph' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","NewExpression","'canvas' is assigned a value but never used.","'getNodeFromLink' is assigned a value but never used.","'getLink' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'paths' is assigned a value but never used.","dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"62","text":"63"},"'useState' is defined but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",[8154,8165],"\r\n        ."]