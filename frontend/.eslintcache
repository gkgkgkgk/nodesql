[{"C:\\Users\\gkepe\\Documents\\nodesql\\frontend\\src\\index.js":"1","C:\\Users\\gkepe\\Documents\\nodesql\\frontend\\src\\App.js":"2","C:\\Users\\gkepe\\Documents\\nodesql\\frontend\\src\\utils.js":"3","C:\\Users\\gkepe\\Documents\\nodesql\\frontend\\src\\components\\Modal\\index.js":"4","C:\\Users\\gkepe\\Documents\\nodesql\\frontend\\src\\components\\DataTable\\index.js":"5"},{"size":228,"mtime":1638313364868,"results":"6","hashOfConfig":"7"},{"size":2070,"mtime":1638313941808,"results":"8","hashOfConfig":"7"},{"size":8573,"mtime":1638313780005,"results":"9","hashOfConfig":"7"},{"size":577,"mtime":1638313364866,"results":"10","hashOfConfig":"7"},{"size":670,"mtime":1638313912122,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ppb3gb",{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"19"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},"C:\\Users\\gkepe\\Documents\\nodesql\\frontend\\src\\index.js",[],"C:\\Users\\gkepe\\Documents\\nodesql\\frontend\\src\\App.js",["26","27","28"],"import './App.css';\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { LiteGraph } from 'litegraph.js';\r\nimport 'litegraph.js/css/litegraph.css';\r\nimport { init, getSQL, convertToJson } from './utils';\r\nimport Modal from './components/Modal';\r\nconst { operations } = require('./schemas/operations.json');\r\n\r\nfunction App() {\r\n  var graph;\r\n  var canvasRef = useRef(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [query, setQuery] = useState('');\r\n  const [result, setResult] = useState([]);\r\n  const [keys, setKeys] = useState([]);\r\n\r\n  const setResponse = (query, result, keys) => {\r\n    setQuery(query);\r\n    setResult(result);\r\n    setKeys(keys);\r\n  }\r\n\r\n  const setShowModalWrapper = (b) => {\r\n    getSQL(graph);\r\n    setShowModal(b);\r\n  }\r\n\r\n  useEffect(() => {\r\n\r\n    const handleResize = () => {\r\n      const ctx = canvasRef.current.getContext('2d');\r\n      ctx.canvas.width = window.innerWidth;\r\n      ctx.canvas.height = window.innerHeight;\r\n    };\r\n\r\n    const handleKeyDown = (e) => {\r\n      if (e.key === 's') {\r\n        convertToJson(\"[(58, 'rusty', 10, 35), (60, 'jit', 10, 35), (62, 'shaun', 10, 35), (71, 'zorba', 10, 35)]\");\r\n        getSQL();\r\n      }\r\n    };\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    handleResize();\r\n\r\n    graph = new LiteGraph.LGraph();\r\n    graph.configure({\r\n    });\r\n\r\n\r\n\r\n    var canvas = new LiteGraph.LGraphCanvas(\"#mycanvas\", graph);\r\n\r\n    graph.start()\r\n    LiteGraph.clearRegisteredTypes()\r\n\r\n\r\n    init(graph, setShowModalWrapper, setResponse);\r\n    var displayNode = LiteGraph.createNode(\"Display/Display\");\r\n    displayNode.pos = [window.innerWidth / 2, window.innerHeight / 2];\r\n    graph.add(displayNode);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <canvas ref={canvasRef} id='mycanvas' width='1024' height='720'></canvas>\r\n      <Modal showModal={showModal} setShowModal={setShowModal} query={query} result={result} keys={keys}></Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\gkepe\\Documents\\nodesql\\frontend\\src\\utils.js",["29","30","31","32","33"],"import { LiteGraph } from 'litegraph.js';\r\nimport axios from 'axios';\r\nconst { tables } = require('./schemas/tables.json');\r\n\r\nvar graph;\r\nlet setResponse;\r\n\r\nconst init = (g, showModal, r) => {\r\n    graph = g;\r\n    setResponse = r;\r\n\r\n    createEntityBlocks();\r\n    createFilterBlock();\r\n    createDisplayBlock(showModal);\r\n};\r\n\r\nconst getNodeFromLink = id => {\r\n    let serialized = graph.serialize();\r\n    let links = serialized.links;\r\n    let origin_id;\r\n    let target_id;\r\n\r\n    console.log(links);\r\n    console.log(serialized.nodes);\r\n    console.log(id);\r\n    for (let l of links) {\r\n        if (l[5] === id) {\r\n            origin_id = l[1];\r\n            target_id = l[3];\r\n        }\r\n    }\r\n\r\n    return [graph.getNodeById(origin_id), graph.getNodeById(target_id)];\r\n};\r\n\r\nconst getLink = id => {\r\n    let serialized = graph.serialize();\r\n    let links = serialized.links;\r\n\r\n    for (let l of links) {\r\n        console.log(l);\r\n        console.log(id);\r\n        if (l[0] === id) {\r\n            return l;\r\n        }\r\n    }\r\n};\r\n\r\nconst createEntityBlocks = () => {\r\n    for (let table of tables) {\r\n        let name = table.name_;\r\n        function EntityNode() {\r\n            this.addOutput(table.name_, \"Entity\");\r\n            for (let field of table.columns) {\r\n                this.addOutput(field.name, field.type);\r\n            }\r\n        }\r\n\r\n        EntityNode.prototype.onExecute = function () {\r\n            this.setOutputData(0, this.getInputData(0));\r\n        };\r\n\r\n        EntityNode.title = name;\r\n        EntityNode.color = \"#00470f\";\r\n        EntityNode.bgcolor = \"#002307\";\r\n        LiteGraph.registerNodeType(\"Entity/\" + name, EntityNode);\r\n    }\r\n};\r\n\r\nconst createFilterBlock = () => {\r\n    const setCustomValue = (value, widget, node) => {\r\n        node.properties.CustomValue = value;\r\n    };\r\n\r\n    const setOperation = (value, widget, node) => {\r\n        node.properties.Operation = value;\r\n    };\r\n\r\n    const adjustWidgets0 = (value, widget, node) => {\r\n        node.properties.Field = value;\r\n        let type;\r\n        for (let field of node.properties.Fields) {\r\n            if (field.name === value) {\r\n                type = field.type;\r\n            }\r\n        }\r\n\r\n        if (type === 'string') {\r\n            node.widgets[1].options.values = ['is the same as', 'starts with', 'ends with'];\r\n            node.widgets[1].value = 'is the same as';\r\n            node.properties.Operation = 'is the same as';\r\n\r\n            let stringFields = [];\r\n            for (let field of node.properties.Fields) {\r\n                if (field.type === 'string') {\r\n                    stringFields.push(field.name);\r\n                }\r\n            }\r\n\r\n            stringFields.push('external node');\r\n            stringFields.push('custom input');\r\n\r\n            node.widgets[2].options.values = stringFields;\r\n            node.widgets[2].value = stringFields[0];\r\n            node.properties.Field2 = stringFields[0];\r\n        }\r\n        else if (type === 'number') {\r\n            node.widgets[1].options.values = ['=', '<', '>', '<=', '>=', '!='];\r\n            node.widgets[1].value = '=';\r\n            node.properties.Operation = '=';\r\n\r\n            let numberFields = [];\r\n            for (let field of node.properties.Fields) {\r\n                if (field.type === 'number') {\r\n                    numberFields.push(field.name);\r\n                }\r\n            }\r\n\r\n            numberFields.push('external node');\r\n            numberFields.push('custom input');\r\n\r\n            node.widgets[2].options.values = numberFields;\r\n            node.widgets[2].value = numberFields[0];\r\n            node.properties.Field2 = numberFields[0];\r\n        }\r\n    };\r\n\r\n    const adjustWidgets2 = (value, widget, node) => {\r\n        node.properties.Field2 = value;\r\n        if (value === 'external node') {\r\n            // check if node has input 'value'\r\n            if (node.inputs.length <= 1) {\r\n                node.addInput('value');\r\n            }\r\n        }\r\n        else {\r\n            node.removeInput(1);\r\n        }\r\n\r\n        let type;\r\n        for (let field of node.properties.Fields) {\r\n            if (field.name === node.widgets[0].value) {\r\n                type = field.type;\r\n            }\r\n        }\r\n\r\n        if (value === 'custom input') {\r\n            // todo: make sure not to add widget if custom input already exists\r\n            if (type === 'string') {\r\n                node.addWidget(\"text\", \"Custom Input\", \"\", setCustomValue);\r\n            }\r\n            else if (type === 'number') {\r\n                node.addWidget(\"number\", \"Custom Input\", 0, setCustomValue);\r\n            }\r\n        }\r\n        else {\r\n            // remove last element from node.widgets\r\n            if (node.widgets.at(-1).name === 'Custom Input') {\r\n                node.widgets.pop();\r\n            }\r\n        }\r\n    };\r\n    function FilterNode() {\r\n        this.addProperty('Fields', [], 'array');\r\n        this.addInput(\"entity\");\r\n        this.addOutput(\"output\");\r\n        this.addWidget(\"combo\", \"Field\", \"Field\", adjustWidgets0, { \"values\": [''] });\r\n        this.addWidget(\"combo\", \"Operation\", '', setOperation, { \"values\": [''] });\r\n        this.addWidget(\"combo\", \"Field\", '', adjustWidgets2, { \"values\": [''] });\r\n        this.properties = { Field: \"\", Field2: \"\", CustomValue: \"\", Operation: \"\", Fields: [] };\r\n    }\r\n\r\n    FilterNode.prototype.onExecute = function () {\r\n    };\r\n\r\n    FilterNode.prototype.onConnectionsChange = function (type, slotIndex, isConnected, link, ioSlot) {\r\n        if (slotIndex === 0) {\r\n            let node = graph.getNodeById(link.origin_id);\r\n            let fieldValues = [];\r\n            let outputs = [];\r\n\r\n            if (node.type == \"Operations/Filter\") {\r\n                outputs = node.properties.Fields;\r\n                for (let i = 0; i < outputs.length; i++) {\r\n                    this.properties.Fields[i] = outputs[i];\r\n                    fieldValues.push(outputs[i].name);\r\n                }\r\n            }\r\n            else {\r\n                outputs = node.outputs;\r\n                for (let i = 1; i < outputs.length; i++) {\r\n                    this.properties.Fields[i - 1] = outputs[i];\r\n                    fieldValues.push(outputs[i].name);\r\n                }\r\n            }\r\n\r\n            this.widgets[0].options.values = fieldValues;\r\n            this.widgets[0].value = fieldValues[0];\r\n        }\r\n        else if (slotIndex == 1) {\r\n            let node = graph.getNodeById(link.origin_id);\r\n            this.properties.CustomValue = node.properties.Output;\r\n        }\r\n    };\r\n\r\n    FilterNode.title = \"Filter\";\r\n    LiteGraph.registerNodeType(\"Operations/Filter\", FilterNode);\r\n};\r\n\r\nconst createDisplayBlock = showModal => {\r\n    const show = () => {\r\n        showModal(true);\r\n    }\r\n    function DisplayNode() {\r\n        this.addInput(\"entity\");\r\n        this.addWidget(\"button\", \"Run Query\", \"\", show);\r\n    }\r\n\r\n    DisplayNode.prototype.onExecute = function () {\r\n    };\r\n\r\n    DisplayNode.prototype.onConnectionsChange = function (type, slotIndex, isConnected, link, ioSlot) {\r\n        if (isConnected) {\r\n            this.addInput(\"entity\");\r\n        }\r\n        else {\r\n            this.removeInput(slotIndex);\r\n        }\r\n    };\r\n\r\n    DisplayNode.title = \"Display\";\r\n    DisplayNode.color = \"#00004d\";\r\n    DisplayNode.bgcolor = \"#000034\";\r\n    LiteGraph.registerNodeType(\"Display/Display\", DisplayNode);\r\n};\r\n\r\nconst getSQL = () => {\r\n    // preprocess data here\r\n    //[link_id, origin_id, origin_slot, target_id, target_slot, link_type];\r\n    console.log(graph.serialize());\r\n    let serialization = graph.serialize();\r\n\r\n    let nodes = serialization.nodes;\r\n    let links = serialization.links;\r\n\r\n    // sort nodes by order\r\n    nodes.sort((a, b) => {\r\n        return a.order - b.order;\r\n    });\r\n\r\n    console.log(nodes, links);\r\n\r\n    axios.post('http://localhost:5000/', {\r\n        nodes: nodes,\r\n        links: links\r\n    }, { useCredentails: true }).\r\n        then(function (response) {\r\n            console.log(response.data);\r\n            setResponse(response.data.query, response.data.result, response.data.keys);\r\n        }).catch(function (error) {\r\n            console.log(error);\r\n        });\r\n};\r\n\r\nconst convertToJson = result => {\r\n    let json = result.split(\"(\");\r\n    // remove first and last element from array\r\n    json.shift();\r\n    json.pop();\r\n    // remove all close parenthesis\r\n    json = json.map(element => element.replace(/\\)/g, ''));\r\n\r\n    console.log(json);\r\n\r\n    return json;\r\n};\r\n\r\nexport { init, getSQL, convertToJson };","C:\\Users\\gkepe\\Documents\\nodesql\\frontend\\src\\components\\Modal\\index.js",["34","35"],"import React, { useState, useEffect } from 'react';\r\nimport DataTable from '../DataTable';\r\nimport './styles.css';\r\n\r\nconst Modal = ({ showModal: show, setShowModal: setShow, query, result, keys }) => {\r\n    const handleClose = () => {\r\n        setShow(false);\r\n    }\r\n\r\n    return (\r\n        <div className=\"modal\" style={{ \"display\": (show ? \"block\" : \"none\") }}>\r\n            <button onClick={handleClose}>&times;</button>\r\n            <p>{query}</p>\r\n            <p><DataTable keys={keys} result={result}></DataTable></p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Modal;","C:\\Users\\gkepe\\Documents\\nodesql\\frontend\\src\\components\\DataTable\\index.js",["36","37"],"import React, { useState, useEffect } from 'react';\r\n\r\nconst DataTable = (props) => {\r\n    return (\r\n        <table>\r\n            <tr>\r\n                {props.keys.map((key, index) => {\r\n                    return <th key={index}>{key}</th>\r\n                })}\r\n            </tr>\r\n            {props.result.map((row, index) => {\r\n                return (\r\n                    <tr key={index}>\r\n                        {props.keys.map((key, index) => {\r\n                            return <td key={index}>{row[key]}</td>\r\n                        })}\r\n                    </tr>\r\n                )\r\n            })}\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default DataTable;",{"ruleId":"38","severity":1,"message":"39","line":7,"column":9,"nodeType":"40","messageId":"41","endLine":7,"endColumn":19},{"ruleId":"42","severity":1,"message":"43","line":47,"column":13,"nodeType":"44","endLine":47,"endColumn":35},{"ruleId":"38","severity":1,"message":"45","line":53,"column":9,"nodeType":"40","messageId":"41","endLine":53,"endColumn":15},{"ruleId":"38","severity":1,"message":"46","line":17,"column":7,"nodeType":"40","messageId":"41","endLine":17,"endColumn":22},{"ruleId":"38","severity":1,"message":"47","line":36,"column":7,"nodeType":"40","messageId":"41","endLine":36,"endColumn":14},{"ruleId":"48","severity":1,"message":"49","line":182,"column":27,"nodeType":"50","messageId":"51","endLine":182,"endColumn":29},{"ruleId":"48","severity":1,"message":"49","line":200,"column":28,"nodeType":"50","messageId":"51","endLine":200,"endColumn":30},{"ruleId":"52","severity":1,"message":"53","line":256,"column":33,"nodeType":"54","messageId":"55","endLine":256,"endColumn":34,"fix":"56"},{"ruleId":"38","severity":1,"message":"57","line":1,"column":17,"nodeType":"40","messageId":"41","endLine":1,"endColumn":25},{"ruleId":"38","severity":1,"message":"58","line":1,"column":27,"nodeType":"40","messageId":"41","endLine":1,"endColumn":36},{"ruleId":"38","severity":1,"message":"57","line":1,"column":17,"nodeType":"40","messageId":"41","endLine":1,"endColumn":25},{"ruleId":"38","severity":1,"message":"58","line":1,"column":27,"nodeType":"40","messageId":"41","endLine":1,"endColumn":36},"no-unused-vars","'operations' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","Assignments to the 'graph' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","NewExpression","'canvas' is assigned a value but never used.","'getNodeFromLink' is assigned a value but never used.","'getLink' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"59","text":"60"},"'useState' is defined but never used.","'useEffect' is defined but never used.",[7971,7982],"\r\n        ."]