[{"E:\\School\\'21-F\\ECE464 Databases\\nodesql\\frontend\\src\\index.js":"1","E:\\School\\'21-F\\ECE464 Databases\\nodesql\\frontend\\src\\App.js":"2","E:\\School\\'21-F\\ECE464 Databases\\nodesql\\frontend\\src\\utils.js":"3"},{"size":228,"mtime":1637205214025,"results":"4","hashOfConfig":"5"},{"size":1189,"mtime":1637302322577,"results":"6","hashOfConfig":"5"},{"size":6725,"mtime":1637452883958,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"11bnzc8",{"filePath":"11","messages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\School\\'21-F\\ECE464 Databases\\nodesql\\frontend\\src\\index.js",[],["16","17"],"E:\\School\\'21-F\\ECE464 Databases\\nodesql\\frontend\\src\\App.js",["18","19","20","21"],"import './App.css';\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { LiteGraph } from 'litegraph.js';\r\nimport 'litegraph.js/css/litegraph.css';\r\nimport init from './utils';\r\nconst { operations } = require('./schemas/operations.json');\r\n\r\nfunction App() {\r\n  var graph;\r\n  var canvasRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n\r\n    const handleResize = () => {\r\n      const ctx = canvasRef.current.getContext('2d');\r\n      ctx.canvas.width = window.innerWidth;\r\n      ctx.canvas.height = window.innerHeight;\r\n    };\r\n\r\n    const handleKeyDown = (e) => {\r\n      if (e.key === 's') {\r\n        // getSQL(); TODO: fix this\r\n      }\r\n    };\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    handleResize();\r\n\r\n    graph = new LiteGraph.LGraph();\r\n    graph.configure({\r\n    });\r\n\r\n\r\n\r\n    var canvas = new LiteGraph.LGraphCanvas(\"#mycanvas\", graph);\r\n\r\n    graph.start()\r\n    LiteGraph.clearRegisteredTypes()\r\n\r\n\r\n    init(graph);\r\n  });\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <canvas ref={canvasRef} id='mycanvas' width='1024' height='720'></canvas>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","E:\\School\\'21-F\\ECE464 Databases\\nodesql\\frontend\\src\\utils.js",["22","23","24"],{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","severity":1,"message":"30","line":2,"column":17,"nodeType":"31","messageId":"32","endLine":2,"endColumn":25},{"ruleId":"29","severity":1,"message":"33","line":6,"column":9,"nodeType":"31","messageId":"32","endLine":6,"endColumn":19},{"ruleId":"34","severity":1,"message":"35","line":30,"column":13,"nodeType":"36","endLine":30,"endColumn":35},{"ruleId":"29","severity":1,"message":"37","line":36,"column":9,"nodeType":"31","messageId":"32","endLine":36,"endColumn":15},{"ruleId":"29","severity":1,"message":"38","line":13,"column":7,"nodeType":"31","messageId":"32","endLine":13,"endColumn":22},{"ruleId":"29","severity":1,"message":"39","line":32,"column":7,"nodeType":"31","messageId":"32","endLine":32,"endColumn":14},{"ruleId":"29","severity":1,"message":"40","line":175,"column":7,"nodeType":"31","messageId":"32","endLine":175,"endColumn":13},"no-native-reassign",["41"],"no-negated-in-lhs",["42"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'operations' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the 'graph' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","NewExpression","'canvas' is assigned a value but never used.","'getNodeFromLink' is assigned a value but never used.","'getLink' is assigned a value but never used.","'getSQL' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]