[{"E:\\School\\'21-F\\ECE464 Databases\\nodesql\\frontend\\src\\index.js":"1","E:\\School\\'21-F\\ECE464 Databases\\nodesql\\frontend\\src\\App.js":"2","E:\\School\\'21-F\\ECE464 Databases\\nodesql\\frontend\\src\\utils.js":"3","E:\\School\\'21-F\\ECE464 Databases\\nodesql\\frontend\\src\\components\\Modal\\index.js":"4"},{"size":228,"mtime":1637205214025,"results":"5","hashOfConfig":"6"},{"size":1858,"mtime":1637716001862,"results":"7","hashOfConfig":"6"},{"size":12303,"mtime":1637718311280,"results":"8","hashOfConfig":"6"},{"size":489,"mtime":1637716058366,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"11bnzc8",{"filePath":"13","messages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},"E:\\School\\'21-F\\ECE464 Databases\\nodesql\\frontend\\src\\index.js",[],["22","23"],"E:\\School\\'21-F\\ECE464 Databases\\nodesql\\frontend\\src\\App.js",["24","25","26"],"import './App.css';\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { LiteGraph } from 'litegraph.js';\r\nimport 'litegraph.js/css/litegraph.css';\r\nimport { init, getSQL } from './utils';\r\nimport Modal from './components/Modal';\r\nconst { operations } = require('./schemas/operations.json');\r\n\r\nfunction App() {\r\n  var graph;\r\n  var canvasRef = useRef(null);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [query, setQuery] = useState('');\r\n  const [result, setResult] = useState('');\r\n\r\n  const setResponse = (query, result) => {\r\n    setQuery(query);\r\n    setResult(result);\r\n  }\r\n\r\n  const setShowModalWrapper = (b) => {\r\n    getSQL(graph);\r\n    setShowModal(b);\r\n  }\r\n\r\n  useEffect(() => {\r\n\r\n    const handleResize = () => {\r\n      const ctx = canvasRef.current.getContext('2d');\r\n      ctx.canvas.width = window.innerWidth;\r\n      ctx.canvas.height = window.innerHeight;\r\n    };\r\n\r\n    const handleKeyDown = (e) => {\r\n      if (e.key === 's') {\r\n        getSQL();\r\n      }\r\n    };\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    handleResize();\r\n\r\n    graph = new LiteGraph.LGraph();\r\n    graph.configure({\r\n    });\r\n\r\n\r\n\r\n    var canvas = new LiteGraph.LGraphCanvas(\"#mycanvas\", graph);\r\n\r\n    graph.start()\r\n    LiteGraph.clearRegisteredTypes()\r\n\r\n\r\n    init(graph, setShowModalWrapper, setResponse);\r\n    var displayNode = LiteGraph.createNode(\"Display/Display\");\r\n    displayNode.pos = [window.innerWidth / 2, window.innerHeight / 2];\r\n    graph.add(displayNode);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <canvas ref={canvasRef} id='mycanvas' width='1024' height='720'></canvas>\r\n      <Modal showModal={showModal} setShowModal={setShowModal} query={query} result={result}></Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","E:\\School\\'21-F\\ECE464 Databases\\nodesql\\frontend\\src\\utils.js",["27","28","29","30","31","32"],"import { LiteGraph } from 'litegraph.js';\r\nimport axios from 'axios';\r\nconst { tables } = require('./schemas/tables.json');\r\n\r\nvar graph;\r\nlet setResponse;\r\n\r\nconst init = (g, showModal, r) => {\r\n    graph = g;\r\n    setResponse = r;\r\n\r\n    createEntityBlocks();\r\n    createFilterBlock();\r\n    createDisplayBlock(showModal);\r\n};\r\n\r\nconst getNodeFromLink = id => {\r\n    let serialized = graph.serialize();\r\n    let links = serialized.links;\r\n    let origin_id;\r\n    let target_id;\r\n\r\n    console.log(links);\r\n    console.log(serialized.nodes);\r\n    console.log(id);\r\n    for (let l of links) {\r\n        if (l[5] === id) {\r\n            origin_id = l[1];\r\n            target_id = l[3];\r\n        }\r\n    }\r\n\r\n    return [graph.getNodeById(origin_id), graph.getNodeById(target_id)];\r\n};\r\n\r\nconst getLink = id => {\r\n    let serialized = graph.serialize();\r\n    let links = serialized.links;\r\n\r\n    for (let l of links) {\r\n        console.log(l);\r\n        console.log(id);\r\n        if (l[0] === id) {\r\n            return l;\r\n        }\r\n    }\r\n};\r\n\r\nconst createEntityBlocks = () => {\r\n    for (let table of tables) {\r\n        let name = table.name_;\r\n        function EntityNode() {\r\n            this.addOutput(table.name_, \"Entity\");\r\n            for (let field of table.columns) {\r\n                this.addOutput(field.name, field.type);\r\n            }\r\n        }\r\n\r\n        EntityNode.prototype.onExecute = function () {\r\n            this.setOutputData(0, this.getInputData(0));\r\n        };\r\n\r\n        EntityNode.title = name;\r\n        EntityNode.color = \"#00470f\";\r\n        EntityNode.bgcolor = \"#002307\";\r\n        LiteGraph.registerNodeType(\"Entity/\" + name, EntityNode);\r\n    }\r\n};\r\n\r\nconst createFilterBlock = () => {\r\n    const setCustomValue = (value, widget, node) => {\r\n        node.properties.CustomValue = value;\r\n    };\r\n\r\n    const setOperation = (value, widget, node) => {\r\n        node.properties.Operation = value;\r\n    };\r\n\r\n    const adjustWidgets0 = (value, widget, node) => {\r\n        node.properties.Field = value;\r\n        let type;\r\n        for (let field of node.properties.Fields) {\r\n            if (field.name === value) {\r\n                type = field.type;\r\n            }\r\n        }\r\n\r\n        if (type === 'string') {\r\n            node.widgets[1].options.values = ['is the same as', 'starts with', 'ends with'];\r\n            node.widgets[1].value = 'is the same as';\r\n            node.properties.Operation = 'is the same as';\r\n\r\n            let stringFields = [];\r\n            for (let field of node.properties.Fields) {\r\n                if (field.type === 'string') {\r\n                    stringFields.push(field.name);\r\n                }\r\n            }\r\n\r\n            stringFields.push('external node');\r\n            stringFields.push('custom input');\r\n\r\n            node.widgets[2].options.values = stringFields;\r\n            node.widgets[2].value = stringFields[0];\r\n            node.properties.Field2 = stringFields[0];\r\n        }\r\n        else if (type === 'number') {\r\n            node.widgets[1].options.values = ['=', '<', '>', '<=', '>=', '!='];\r\n            node.widgets[1].value = '=';\r\n            node.properties.Operation = '=';\r\n\r\n            let numberFields = [];\r\n            for (let field of node.properties.Fields) {\r\n                if (field.type === 'number') {\r\n                    numberFields.push(field.name);\r\n                }\r\n            }\r\n\r\n            numberFields.push('external node');\r\n            numberFields.push('custom input');\r\n\r\n            node.widgets[2].options.values = numberFields;\r\n            node.widgets[2].value = numberFields[0];\r\n            node.properties.Field2 = numberFields[0];\r\n        }\r\n    };\r\n\r\n    const adjustWidgets2 = (value, widget, node) => {\r\n        node.properties.Field2 = value;\r\n        if (value === 'external node') {\r\n            // check if node has input 'value'\r\n            if (node.inputs.length <= 1) {\r\n                node.addInput('value');\r\n            }\r\n        }\r\n        else {\r\n            node.removeInput(1);\r\n        }\r\n\r\n        let type;\r\n        for (let field of node.properties.Fields) {\r\n            if (field.name === node.widgets[0].value) {\r\n                type = field.type;\r\n            }\r\n        }\r\n\r\n        if (value === 'custom input') {\r\n            // todo: make sure not to add widget if custom input already exists\r\n            if (type === 'string') {\r\n                node.addWidget(\"text\", \"Custom Input\", \"\", setCustomValue);\r\n            }\r\n            else if (type === 'number') {\r\n                node.addWidget(\"number\", \"Custom Input\", 0, setCustomValue);\r\n            }\r\n        }\r\n        else {\r\n            // remove last element from node.widgets\r\n            if (node.widgets.at(-1).name === 'Custom Input') {\r\n                node.widgets.pop();\r\n            }\r\n        }\r\n    };\r\n    function FilterNode() {\r\n        this.addProperty('Fields', [], 'array');\r\n        this.addInput(\"entity\");\r\n        this.addOutput(\"output\");\r\n        this.addWidget(\"combo\", \"Field\", \"Field\", adjustWidgets0, { \"values\": [''] });\r\n        this.addWidget(\"combo\", \"Operation\", '', setOperation, { \"values\": [''] });\r\n        this.addWidget(\"combo\", \"Field\", '', adjustWidgets2, { \"values\": [''] });\r\n        this.properties = { Field: \"\", Field2: \"\", CustomValue: \"\", Operation: \"\", Fields: [] };\r\n    }\r\n\r\n    FilterNode.prototype.onExecute = function () {\r\n    };\r\n\r\n    FilterNode.prototype.onConnectionsChange = function (type, slotIndex, isConnected, link, ioSlot) {\r\n        if (slotIndex === 0) {\r\n            let node = graph.getNodeById(link.origin_id);\r\n            let fieldValues = [];\r\n            let outputs = [];\r\n\r\n            if (node.type == \"Operations/Filter\") {\r\n                outputs = node.properties.Fields;\r\n                for (let i = 0; i < outputs.length; i++) {\r\n                    this.properties.Fields[i] = outputs[i];\r\n                    fieldValues.push(outputs[i].name);\r\n                }\r\n            }\r\n            else {\r\n                outputs = node.outputs;\r\n                for (let i = 1; i < outputs.length; i++) {\r\n                    this.properties.Fields[i - 1] = outputs[i];\r\n                    fieldValues.push(outputs[i].name);\r\n                }\r\n            }\r\n\r\n            this.widgets[0].options.values = fieldValues;\r\n            this.widgets[0].value = fieldValues[0];\r\n        }\r\n        else if (slotIndex == 1) {\r\n            let node = graph.getNodeById(link.origin_id);\r\n            this.properties.CustomValue = node.properties.Output;\r\n        }\r\n    };\r\n\r\n    FilterNode.title = \"Filter\";\r\n    LiteGraph.registerNodeType(\"Operations/Filter\", FilterNode);\r\n};\r\n\r\nconst createDisplayBlock = showModal => {\r\n    const show = () => {\r\n        showModal(true);\r\n    }\r\n    function DisplayNode() {\r\n        this.addInput(\"entity\");\r\n        this.addWidget(\"button\", \"Run Query\", \"\", show);\r\n    }\r\n\r\n    DisplayNode.prototype.onExecute = function () {\r\n    };\r\n\r\n    DisplayNode.prototype.onConnectionsChange = function (type, slotIndex, isConnected, link, ioSlot) {\r\n        if (isConnected) {\r\n            this.addInput(\"entity\");\r\n        }\r\n        else {\r\n            this.removeInput(slotIndex);\r\n        }\r\n    };\r\n\r\n    DisplayNode.title = \"Display\";\r\n    DisplayNode.color = \"#00004d\";\r\n    DisplayNode.bgcolor = \"#000034\";\r\n    LiteGraph.registerNodeType(\"Display/Display\", DisplayNode);\r\n};\r\n\r\nconst getSQL = () => {\r\n    // preprocess data here\r\n    //[link_id, origin_id, origin_slot, target_id, target_slot, link_type];\r\n    // let serialization = graph.serialize();\r\n    console.log(graph.serialize());\r\n    let serialization = graph.serialize();\r\n\r\n    let nodes = serialization.nodes;\r\n    let links = serialization.links;\r\n\r\n    // sort nodes by order\r\n    nodes.sort((a, b) => {\r\n        return a.order - b.order;\r\n    });\r\n\r\n    // console.log(nodes);\r\n\r\n    let paths = [];\r\n    let displayNode = serialization.nodes.find(node => node.type === 'Display/Display');\r\n\r\n    for (let i = 0; i < displayNode.inputs.length; i++) {\r\n    }\r\n\r\n    console.log(\"post request\");\r\n\r\n    axios.post('http://localhost:5000/', {\r\n        nodes: nodes,\r\n        links: links\r\n    }, { useCredentails: true }).\r\n        then(function (response) {\r\n            setResponse(response.data.query, response.data.result);\r\n        }).catch(function (error) {\r\n            console.log(error);\r\n        });\r\n    // console.log(serialization);\r\n};\r\n\r\nexport { init, getSQL };\r\n\r\n/* example data:\r\n{\r\n    \"last_node_id\": 3,\r\n    \"last_link_id\": 3,\r\n    \"nodes\": [\r\n        {\r\n            \"id\": 1,\r\n            \"type\": \"Display/Display\",\r\n            \"pos\": [\r\n                1251,\r\n                625\r\n            ],\r\n            \"size\": {\r\n                \"0\": 140,\r\n                \"1\": 46\r\n            },\r\n            \"flags\": {},\r\n            \"order\": 2,\r\n            \"mode\": 0,\r\n            \"inputs\": [\r\n                {\r\n                    \"name\": \"entity\",\r\n                    \"type\": 0,\r\n                    \"link\": 3\r\n                },\r\n                {\r\n                    \"name\": \"entity\",\r\n                    \"type\": 0,\r\n                    \"link\": null\r\n                }\r\n            ],\r\n            \"properties\": {}\r\n        },\r\n        {\r\n            \"id\": 3,\r\n            \"type\": \"Operations/Filter\",\r\n            \"pos\": [\r\n                900,\r\n                556\r\n            ],\r\n            \"size\": {\r\n                \"0\": 210,\r\n                \"1\": 130\r\n            },\r\n            \"flags\": {},\r\n            \"order\": 1,\r\n            \"mode\": 0,\r\n            \"inputs\": [\r\n                {\r\n                    \"name\": \"entity\",\r\n                    \"type\": 0,\r\n                    \"link\": 2\r\n                }\r\n            ],\r\n            \"outputs\": [\r\n                {\r\n                    \"name\": \"output\",\r\n                    \"links\": [\r\n                        3\r\n                    ]\r\n                }\r\n            ],\r\n            \"properties\": {\r\n                \"Fields\": [\r\n                    {\r\n                        \"name\": \"sid\",\r\n                        \"type\": \"number\",\r\n                        \"links\": null\r\n                    },\r\n                    {\r\n                        \"name\": \"sname\",\r\n                        \"type\": \"string\",\r\n                        \"links\": null\r\n                    },\r\n                    {\r\n                        \"name\": \"rating\",\r\n                        \"type\": \"number\",\r\n                        \"links\": null\r\n                    },\r\n                    {\r\n                        \"name\": \"age\",\r\n                        \"type\": \"number\",\r\n                        \"links\": null\r\n                    }\r\n                ]\r\n            }\r\n        },\r\n        {\r\n            \"id\": 2,\r\n            \"type\": \"Entity/Sailor\",\r\n            \"pos\": [\r\n                635,\r\n                581\r\n            ],\r\n            \"size\": {\r\n                \"0\": 140,\r\n                \"1\": 106\r\n            },\r\n            \"flags\": {},\r\n            \"order\": 0,\r\n            \"mode\": 0,\r\n            \"outputs\": [\r\n                {\r\n                    \"name\": \"Sailor\",\r\n                    \"type\": \"Entity\",\r\n                    \"links\": [\r\n                        2\r\n                    ]\r\n                },\r\n                {\r\n                    \"name\": \"sid\",\r\n                    \"type\": \"number\",\r\n                    \"links\": null\r\n                },\r\n                {\r\n                    \"name\": \"sname\",\r\n                    \"type\": \"string\",\r\n                    \"links\": null\r\n                },\r\n                {\r\n                    \"name\": \"rating\",\r\n                    \"type\": \"number\",\r\n                    \"links\": null\r\n                },\r\n                {\r\n                    \"name\": \"age\",\r\n                    \"type\": \"number\",\r\n                    \"links\": null\r\n                }\r\n            ],\r\n            \"properties\": {}\r\n        }\r\n    ],\r\n    \"links\": [\r\n        [\r\n            2,\r\n            2,\r\n            0,\r\n            3,\r\n            0,\r\n            0\r\n        ],\r\n        [\r\n            3,\r\n            3,\r\n            0,\r\n            1,\r\n            0,\r\n            0\r\n        ]\r\n    ],\r\n    \"groups\": [],\r\n    \"config\": {},\r\n    \"extra\": {},\r\n    \"version\": 0.4\r\n}\r\n*/","E:\\School\\'21-F\\ECE464 Databases\\nodesql\\frontend\\src\\components\\Modal\\index.js",["33","34"],"import React, { useState, useEffect } from 'react';\r\nimport './styles.css';\r\n\r\nconst Modal = ({ showModal: show, setShowModal: setShow, query, result }) => {\r\n    const handleClose = () => {\r\n        setShow(false);\r\n    }\r\n\r\n    return (\r\n        <div className=\"modal\" style={{ \"display\": (show ? \"block\" : \"none\") }}>\r\n            <button onClick={handleClose}>&times;</button>\r\n            <p>{query}</p>\r\n            <p>{result}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Modal;",{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":7,"column":9,"nodeType":"41","messageId":"42","endLine":7,"endColumn":19},{"ruleId":"43","severity":1,"message":"44","line":44,"column":13,"nodeType":"45","endLine":44,"endColumn":35},{"ruleId":"39","severity":1,"message":"46","line":50,"column":9,"nodeType":"41","messageId":"42","endLine":50,"endColumn":15},{"ruleId":"39","severity":1,"message":"47","line":17,"column":7,"nodeType":"41","messageId":"42","endLine":17,"endColumn":22},{"ruleId":"39","severity":1,"message":"48","line":36,"column":7,"nodeType":"41","messageId":"42","endLine":36,"endColumn":14},{"ruleId":"49","severity":1,"message":"50","line":182,"column":27,"nodeType":"51","messageId":"52","endLine":182,"endColumn":29},{"ruleId":"49","severity":1,"message":"50","line":200,"column":28,"nodeType":"51","messageId":"52","endLine":200,"endColumn":30},{"ruleId":"39","severity":1,"message":"53","line":254,"column":9,"nodeType":"41","messageId":"42","endLine":254,"endColumn":14},{"ruleId":"54","severity":1,"message":"55","line":265,"column":33,"nodeType":"56","messageId":"57","endLine":265,"endColumn":34,"fix":"58"},{"ruleId":"39","severity":1,"message":"59","line":1,"column":17,"nodeType":"41","messageId":"42","endLine":1,"endColumn":25},{"ruleId":"39","severity":1,"message":"60","line":1,"column":27,"nodeType":"41","messageId":"42","endLine":1,"endColumn":36},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"no-unused-vars","'operations' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","Assignments to the 'graph' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","NewExpression","'canvas' is assigned a value but never used.","'getNodeFromLink' is assigned a value but never used.","'getLink' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'paths' is assigned a value but never used.","dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"63","text":"64"},"'useState' is defined but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",[8231,8242],"\r\n        ."]